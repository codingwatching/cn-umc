#include "./RealtimeRayTracingUtility.hlsl"
 #include "./RealtimePhysicallyLightingUtility.hlsl"
 #include "./RealtimeRayTracingRandomUtility.hlsl"
RWTexture2D<float4> UAV_ResultTex;
RWTexture2D<float4> UAV_PrevResultTex;

float4 ResultTexSourceSize;
#pragma max_recursion_depth 24
int AccumFrameIndex;
#define SAMPLE_PER_PIXEL 1

 
[shader("raygeneration")]
void RayGeneration()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    float2 uv=dispatchIdx*ResultTexSourceSize.zw;
    uint3 dispatchDims=DispatchRaysDimensions();
    float3 finalRadiance=0;
         float2 randJitter=(Random2DTo2D(float2((float)1/(float)SAMPLE_PER_PIXEL,uv.y-_Time.x))*2-1)*ResultTexSourceSize.zw*0.5;
        RayDesc cameraRay=CreateCameraRay(uv+randJitter);
        RealtimeRaytracingRayPayload RayIntersection;
        RayIntersection.TracingRayType=PRIMARY_RAY;
        RayIntersection.MetallicRoughness=0;
        RayIntersection.Normal=0;
        RayIntersection.Albedo=0;
        RayIntersection.TracingDepth=0;
        RayIntersection.Radiance=0;
        RayIntersection.HitMaterialType=-1;
        RayIntersection.PrevRayDirection=0;
        RayIntersection.HitDistance = 0;
       
        RayIntersection.randomSeed =float2(
              Random1DTo1D(1,4358.5453,uv.x+_Time.w),
            	Random1DTo1D(1,7458.5453,uv.y-_Time.w));
         
           
        
    TraceRay(SceneRaytracingAccelerationStructure, RAY_FLAG_FORCE_NON_OPAQUE, 0xFF, 0, 1, 0, cameraRay, RayIntersection);
    finalRadiance+=RayIntersection.Radiance.xyz;
      float3 finalResult=finalRadiance;
    #ifndef OUTPUT_RESULT_GAMMA_CORRECTION_ENABLED
     finalResult=finalRadiance;
    #else
     finalResult=pow((finalRadiance),1.0/2.2);
     //float3 finalResult=finalRadiance;
    #endif
    // finalResult=finalResult/(finalResult+float3(1,1,1));
  //    AllMemoryBarrier();
     
 
   
 
  float4 motionVec=_MotionVectorTexture.SampleLevel(sampler_point_clamp,uv,0).xyzw;
 
  float cameraDepth=_CameraDepthTexture.SampleLevel(sampler_point_clamp,uv,0).x;
  int2 motionVectorInt=(motionVec*ResultTexSourceSize.xy);
  int2 prevPosUVInt=dispatchIdx-motionVectorInt;
  float2 prevPosUV=((float2)(prevPosUVInt))*ResultTexSourceSize.zw;
  float cameraDepthPrev=_CameraDepthTexture.SampleLevel(sampler_point_clamp,prevPosUV,0).x;
  float cameraDepthLinear=LinearEyeDepth(cameraDepth,_ZBufferParams);
  float cameraDepthPrevLinear=LinearEyeDepth(cameraDepthPrev,_ZBufferParams);
  float depthDelta=abs(cameraDepthPrevLinear-cameraDepthLinear);
  if(prevPosUV.x<0||prevPosUV.x>1||prevPosUV.y<0||prevPosUV.y>1){
      depthDelta=1000;
      }

      float3 prevColor= UAV_PrevResultTex[dispatchIdx].xyz;
 //  finalResult=lerp(finalResult, UAV_PrevResultTex[prevPosUVInt].xyz,saturate(0.93));

   finalResult=(prevColor*AccumFrameIndex+finalResult)/(AccumFrameIndex+1);
    UAV_ResultTex[dispatchIdx] = float4(finalResult.xyz, 1.0);
}

[shader("miss")]
void MissShader(inout RealtimeRaytracingRayPayload rayPayload : SV_RayPayload){
      float3 rayDir=normalize(WorldRayDirection().xyz);
       if(rayPayload.TracingRayType==SHADOWRAY){
             rayPayload.HitDistance = MAX_RAY_TRACING_DIST*2;
          
              if(dot(GetMainLight().direction,rayDir)>0.999){
                    rayPayload.Radiance = GetMainLight().color;
          //              rayPayload.Radiance+=mainLight.color;
            }else{
                float3 skyRadianceSpec=SRV_SkyboxTex.SampleLevel(sampler_linear_clamp,rayDir,0).xyz;
                 rayPayload.Radiance=skyRadianceSpec;
                }
             
          return;
        }
      
           Light mainLight=GetMainLight();
                    float3 lightDir=mainLight.direction;
           if(dot(lightDir,rayDir)>0.998){
                 
          //              rayPayload.Radiance+=mainLight.color;
            }
        float skyboxMipLevelCount=0;
         float skyboxWidth=0;
          float skyboxHeight=0;
        
        SRV_SkyboxTex.GetDimensions(0,skyboxWidth,skyboxHeight,skyboxMipLevelCount);
        float roughnessMipLevel=rayPayload.MetallicRoughness.y*skyboxMipLevelCount;
        float3 skyRadianceSpec=SRV_SkyboxTex.SampleLevel(sampler_linear_clamp,rayDir,0).xyz;
        float3 skyRadianceDiffuse=SampleSH9(AmbientSHArray,rayDir);
        

         
            rayPayload.Radiance=skyRadianceSpec;
            
       // rayPayload.Radiance+=skyRadianceSpec;

}
